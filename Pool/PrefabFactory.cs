using UnityEngine;

namespace Exodrifter.Anchor
{
	public class PrefabFactory : IFactory<GameObject>
	{
		private readonly bool generatedOwner = false;
		private readonly GameObject prefab;
		private readonly GameObject owner;

		/// <summary>
		/// Creates a new prefab factory and a new GameObject to store the
		/// generated GameObjects in.
		/// </summary>
		/// <param name="prefab">
		/// The GameObject to use as a prefab.
		/// </param>
		/// <param name="ownerName">
		/// The name to use for the GameObject which will store generated
		/// GameObjects.
		/// </param>
		public PrefabFactory(GameObject prefab, string ownerName)
		{
			this.prefab = prefab;
			this.owner = new GameObject(ownerName);
			generatedOwner = true;
		}

		/// <summary>
		/// Creates a new prefab factory.
		/// </summary>
		/// <param name="prefab">
		/// The GameObject to use as a prefab.
		/// </param>
		/// <param name="owner">
		/// The GameObject to store generated GameObjects.
		/// </param>
		public PrefabFactory(GameObject prefab, GameObject owner)
		{
			this.prefab = prefab;
			this.owner = owner;
		}

		/// <summary>
		/// Instantiates a new GameObject.
		/// </summary>
		/// <returns>A new GameObject.</returns>
		public GameObject Instantiate()
		{
			var go = Object.Instantiate(prefab);
			go.transform.SetParent(owner.transform, false);
			return go;
		}

		/// <summary>
		/// Instantiates a new GameObject and returns a component of the specified
		/// type from the prefab.
		/// </summary>
		/// <typeparam name="T">The type of component to return.</typeparam>
		/// <param name="searchChildren">Whether or not to search children.</param>
		/// <returns>The component on the new GameObject.</returns>
		public T Instantiate<T>(bool searchChildren = false)
		{
			return searchChildren
				? Instantiate().GetComponent<T>()
				: Instantiate().GetComponentInChildren<T>();
		}

		/// <summary>
		/// Destroys the owner if it was generated by this factory.
		/// </summary>
		public void Destroy()
		{
			if (generatedOwner)
			{
				Object.Destroy(owner);
			}
		}
	}
}
